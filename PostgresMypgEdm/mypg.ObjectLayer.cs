//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]

namespace mypgModel
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class mypgEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект mypgEntities, используя строку соединения из раздела "mypgEntities" файла конфигурации приложения.
        /// </summary>
        public mypgEntities() : base("name=mypgEntities", "mypgEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта mypgEntities.
        /// </summary>
        public mypgEntities(string connectionString) : base(connectionString, "mypgEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта mypgEntities.
        /// </summary>
        public mypgEntities(EntityConnection connection) : base(connection, "mypgEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<mystrings> mystrings
        {
            get
            {
                if ((_mystrings == null))
                {
                    _mystrings = base.CreateObjectSet<mystrings>("mystrings");
                }
                return _mystrings;
            }
        }
        private ObjectSet<mystrings> _mystrings;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet mystrings. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTomystrings(mystrings mystrings)
        {
            base.AddObject("mystrings", mystrings);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="mypgModel", Name="mystrings")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class mystrings : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта mystrings.
        /// </summary>
        /// <param name="imystr">Исходное значение свойства imystr.</param>
        public static mystrings Createmystrings(global::System.Int32 imystr)
        {
            mystrings mystrings = new mystrings();
            mystrings.imystr = imystr;
            return mystrings;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 imystr
        {
            get
            {
                return _imystr;
            }
            set
            {
                if (_imystr != value)
                {
                    OnimystrChanging(value);
                    ReportPropertyChanging("imystr");
                    _imystr = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("imystr");
                    OnimystrChanged();
                }
            }
        }
        private global::System.Int32 _imystr;
        partial void OnimystrChanging(global::System.Int32 value);
        partial void OnimystrChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String mystr
        {
            get
            {
                return _mystr;
            }
            set
            {
                OnmystrChanging(value);
                ReportPropertyChanging("mystr");
                _mystr = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("mystr");
                OnmystrChanged();
            }
        }
        private global::System.String _mystr;
        partial void OnmystrChanging(global::System.String value);
        partial void OnmystrChanged();

        #endregion
    
    }

    #endregion
    
}
